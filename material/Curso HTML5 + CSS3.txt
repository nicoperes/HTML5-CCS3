>>>>>>>>>>>>>> CURSO HTML5 + CSS3 <<<<<<<<<<<<<<<<<


===========================================================

               PRECISAMOS FAZER UM ACORDO...

===========================================================


> HTML e CSS apesarem de serem linguagens, é errôneo atribuir à linguagens de programação.
> Neste curso, é apresentado 5 módulos de estudos:

:::::::::::::::::::::::::::::
- M01: Primeiros passos
  - Conceitos básicos, preparação do ambiente, semântica da HTML5, textos, titulos, ligações, multimidia, estilos.

- M02: Deixando as coisas mais bonitas
  - Fundamentos do design, psicologia das cores, tipografia, elementos CSS, modelo de caixas, wireframe, responsividade.

- M03: Colocando um protótipo no ar
  - Versionamento de software, hospedagem de sites estáticos, tabelas.

- M04: Aprofundando os conhecimentos
  - Quadros em linha, formulários, media queries, mobile first.

- M05: Novas Tecnologias
  - Flexbox, grid layout, projeto final.
:::::::::::::::::::::::::::::

> Repositórios Públicos
  - github.com/gustavoguanabara
  - gustavoguanabara.github.io


===========================================================

              MODULO 01 - PRIMEIROS PASSOS

===========================================================


AULA #01 - Será que esse curso é para mim?

[...]


===========================================================


AULA #02 - Melhores Livros para aprender HMTL5 e CSS3

> Nesta aula, é apresentado bibliografias recomendadas para se estudar mais a fundo sobre os conteúdos.
> Não sendo obrigatório, mas muito recomendado para compreender melhor conceitos e técnicas.
> Material de apoio do próprio curso em PDF's disponível no repositório do github.com (github.com/gustavoguanabara).
> Referências online:
  - Referência MDN (Mozilla Development Network)
  - W3C Standards (World Wide Web Consortium)
  - WHATWG Living Standard (Web Hypertext Application Technology Working Group)
  - W3Schools (Refsnes Data)

> Livros:

:::::::::::::::::::::::::::::
  - "HTML5 - Entendendo e Estudando" (Pilgrim, Mark; O'REILLY)
  - "CSS - Guia Definitivo" (Meyer, Eric; O'REILLY)
  - "Flexbox in CSS" (Weyl, Estelle; O'REILLY)
  - "Grid Layout in CSS" (Meyer, Eric; O'REILLY)
  [...] (Vários outros referênciados no video)
:::::::::::::::::::::::::::::

> Outros Livros:

:::::::::::::::::::::::::::::
  - "Curso de design gráfico - Princípios e Práticas" (Vários Autores; GG)
  - "Design" (Gordon, Bob & Maggie; SENAC)
  - "A psicologia das cores" (Heller, Eva; GG)
  - "Pensar com tipos" (Lupton, Ellen; GG)
:::::::::::::::::::::::::::::

> São vários livros referênciados no video, estes acima são os que eu julgo mais preferidos.


===========================================================


AULA #03 - História da Internet

> Os primórdios do que hoje é conhecida a internet foi concebido durante o período da Guerra Fria (Especificamente em 1949).
> Os EUA, com o temor de receber um ataque no seu território da União Soviética, gerou uma rede de comunicação de dados para em que caso um ataque acontecesse os dados não seriam perdidos.
> A partir dos anos 70, os militares abandonaram boa parte do controle dessa rede por conta da complexidade em que se aprimorou e proliferou essas redes, dividindo assim o controle para intitutos científicos e empresas interessadas.
> Para se comunicar com diferentes tipos de computadores, foi elaborado uma espécie de linguagem para permitir a comunicação entre as máquinas chamado de protocolo NCP(Network Control Protocol).
> Apesar de ter sido possível essa comunicação, o protocolo NCP era muito básico e limitado, sendo assim o seu funcionamento bastante arcaico.
> Em contrapartida, a medida em que surgiu a necessidade de ter uma comunicação mais elaborada e complexa que atenda os interesses de expansão da rede, um novo protocolo foi elaborado: o TCP/IP(O TCP/IP é a união de dois protocolos).
> Para realizar a troca de dados no protocolo NCP, toda rede era imobilizada para ser possível realizar a transferência. Com o novo protocolo TCP, o bloqueio temporário da rede não era mais necessário, sendo possível a troca de dados instantaneamente com o funcionamento da rede no geral.
> O protocolo IP foi elaborado para resolver os problemas de identificação entre as redes, nas quais estava em constante expansão e tornando essa necessidade precisando ser sanada. Com o IP, é possível identificar cada máquina conectada por endereços específicos pelas conexões.
> Inicialmente, o nome dessa rede no geral não foi idealizado como Internet, mas sim como Arpanet.
> Com o tempo, a rede foi dividida em três partes para uso distinto de instituições: MILNET (Rede Militar), NSFNET (Universidades e Centro de Pesquisas), e outras redes derivadas de uso comercial.
> O empecilho de se comunicar todas as redes entre si fez surgir outra solução: o Interconnection Networking, abreviado mais tarde como INTERNET.
> Com o passar dos anos, um protocolo mais complexo foi elaborado para optimização de transferência de textos: o HTTP. 
> "O Hypertext Transfer Protocol, sigla HTTP é um protocolo de comunicação utilizado para sistemas de informação de hipermídia, distribuídos e colaborativos. Ele é a base para a comunicação de dados da World Wide Web. Hipertexto é o texto estruturado que utiliza ligações lógicas entre nós contendo texto." - Wikipédia
> [...]


===========================================================


AULA #04 - Como a Internet Funciona?

> Ao contrário da crença comum, a imagem de que o computador é "inteligente" é tanto quando superficial, uma frase para resumir bem isso poderia ser escrita da seguinte maneira: "O computador não é inteligente, mas sim um burro muito, mas muito veloz".
> Na realidade, são os programadores que dão a "inteligência" para máquina, afinal, ela não partiu do nada e para o nada, são os profissionais especializados que dão o movimento referente a automatização e funcionamento da máquina.
> Todo equipamento eletrônico funciona a partir da leitura e emissão de sinais. Com o computador não seria diferente, a representação desses dados é caracterizada com os números 0 e 1.
> Os números 0 e 1 não são representados visualmente ou redundantemente como números em si, mas sim como ondas quadradas com/sem sinal (1 = c/ sinal; 0 = s/ sinal).
> Esses sinais/números são chamados de "binary digit", ou simplificando, "bit".
> Com o advento da evolução da tecnologia, a simples representação dos "bits" se tornou limitado. A representação de  algum dado de no mínimo 8 "bit", no qual se chama "byte".
> Exemplo: a sequência "010000010" representa a letra "A". A letra é só uma representação visual, o entendimento do computador é a sequência binária.
> A tabela completa da representação de todos os caracteres em códigos binários é chamado de "UTF-8".
> Tabela métrica de dados:
  1024 bytes = 1 KB (Kilobyte)
  1024 KB = 1 MB (Megabyte)
  1024 MB = 1 GB (Gigabyte)
  1024 GB = 1 TB (Terabyte)
  1024 TB = 1 PB (Petabyte)
  [...]
> LEMBRE-SE: MB ≠ Mb
> O "B" é a representação de "bytes". A métrica MB, GB e TB, por exemplo, é usado para referenciar capacidade de armazenamento.
> O "b" é a representação de "bites". Mb, Gb e Tb é usado para referenciar capacidade de trasmissão.
> Para conseguir se comunicar com a Internet através de um computador, por exemplo, é necessário algum meio de intermediar essa comunicação para receber e enviar sinais de ondas quadradas. O problema é que a linha na qual recebe essas ondas é limitada a conseguir interpretar somente ondas senoidais (ondas curvadas).
> Para conseguir realizar essa conversão de dados, é necessário transformar essas ondas. Para modificar o tipo de onda quadrada para senoidal, o processo é chamado de "modulação".
> Já o inverso, de ondas senoidais para quadradas, é chamado de "demodulação".
> O aparelho "modem" é a abreviação desses dois termos acima. A sua função é modificar essas ondas para que seja possível a leitura destas mesmas em cada esfera.
> Para se conectar a internet, o aparelho se comunicará com o modem para transmitir/receber dados de servidores da internet.
> Para identificar cada um dos sujeitos, cada um é nomeado com endereços "IP" para, por exemplo, conseguir acessar algum website de algum servidor da internet. (EX: 201.17.81.22)
> Como esses endereços são muito voláteis, não é de tom prático acessar um endereço em que muda constantemente. Para isso, os websites possuem domínios como: instagram.com, www.google.com.br, etc.
> Funciona como uma "agenda", esses endereços são demarcados com domínios para ser possivel e mais fácil acessar algum website. Esses domínios estão registrados no "DNS".
> "DNS", ou "Domain Name System", é um sistema hierárquico e distribuído de gestão de nomes para computadores, serviços ou qualquer máquina conectada à Internet ou a uma rede privada.
> Como os recursos de todo esse sistema são finitos e acessado por vários sujeitos, alguns "caminhos" por qual os dados vão percorrer podem estar sobrecarregados ou desativados. O envio/recebimento de dados percorrem o percurso chamado de "rota".
> Quando, por exemplo, ao acessar um site e o mesmo apresenta lentidão ou congelamento da tela ao tentar carregar mas depois de alguns segundos e a tela carregar mais rápido não quer dizer que os dados foram "perdidos", mas sim que esses dados passaram por outra rota ao recarregar a página web.


===========================================================


Aula #05 - O que é domínio e hospedagem?

> É comum iniciantes ou até mesmo futuramente clientes perguntarem sobre hospedagem e domínio.
> Quando se desenvolve algum site (html+css) por trás disso há também o intuito de fazer com que o site seja visto pelo maior número de pessoas possíveis.
> Ao guardar esses arquivos dentro de um computador, não é possível fazer outras pessoas acessarem visto que é necessário um endereço no DNS.
> Para acessar certos websites, é necessário ter a URL (Uniform Resource Locator) Específica. Exemplo: http://www.google.com.br/.

:::::::::::::::::::::::::::::
          DOMÍNIO
:::::::::::::::::::::::::::::

> O domínio representa uma parte principal desta URL, é um nome único que vai conseguir identificar seu website ou suas páginas.
> Alguns exemplos de domínio:
  - faetec.rj.gov.br
  - github.io
  - universidadebrasil.edu.br
> As terminações desses endereços (gov, br, io, edu, etc.) são TLDs (Top Level Domain), podem indicar que o site é de uma instituição comercial, governamental, educacional, ONGs, etc.
  - GTLD: São TLDs genéricas sem indicação de país. ex: .net, .gov, .io, .store, etc.
  - ccTLD: São designações de país (cc = country code), ex: .edu.br, .co.fr., .jp, etc.
> Da junção do nome e da terminação, temos um domínio. Com ele, temos acesso ao servidor do mesmo.
> Além de websites, esses domínios também podem ser servidores ftp, de email (ex: nicolas@gmail.com), entre outros.
> Nos diversos tipos de endereços, contém também os sub-domínios que vão além do clássico "www." (no qual também é um sub-domínio!)
> Exemplos de sub-domínios:
  - images.google.com.br (vai para o google imagens)
  - maps.google.com.br (google maps)
  - mail.google.com.br (entra no gmail)
> As URLs também possuem caminhos. Logo após a barra ("/"), depois do domínio, poderá indicar algum acesso específico dentro do website. Por exemplo: www.github.com/gustavoguanabara.
> http:// e https:// são os protocolos. O HTTPS é o mais moderno que oferece maior segurança.

:::::::::::::::::::::::::::::
         HOSPEDAGEM
:::::::::::::::::::::::::::::

> Para ser possível o seu site ser visto e amostrado na internet é essencial que o site esteja hospedado em um servidor.
> Existem grandes datacenters nos quais possuem toda uma infraestrutura, segurança e performance para certificar que o site esteja disponível 24 horas.
> Tanto o domínio quanto a hospedagem são serviços nos quais é necessário pagar para usufruir do direito, planos variam de mensalmente e anualmente.


===========================================================


AULA #05 - A diferença entre HTML, CSS e Javascript.

> Como funciona a HTML e as CSSs?
  - Para referênciar esses termos, a linguagem HTML se cita no gênero feminino por consequência de ser uma linguagem.
  - Já AS CSSs, no modo plural, se referencia deste modo pois conta com as folhas de estilo.
> "Eu programo em HTML e CSS"
  - HTML e CSS >NÃO< são linguagem de PROGRAMAÇÃO, a pronuncia correta para enunciar que alguém possue habilidades plenas nessas linguagens é substituir o "programo" para "desenvolvo", "crio sites", etc.

:::::::::::::::::::::::::::::
            HTML
:::::::::::::::::::::::::::::

> HTML é a sigla para HYPERTEXT MARKUP LANGUAGE.
> HYPERTEXT significa hiper-texto, são textos em que podem ser desviado para outros textos interligando-se entre si.
> MARKUP é marcas, definindo-a por inteiro como linguagem de marcação, não de programação (na qual pode incluir funções, repetições, vetores, etc.).
> A linguagem HTML é uma linguagem focada em CONTEÚDO, podendo ser textos, imagens, vídeos, tabelas, etc.
> Como uma linguagem de marca, é focada em determinar o conteúdo da página por TAGS.
> Para indicar uma tag específica, sempre deve ser conjurada entre "< >" (conchetes angulares), e na maioria destas mesmas, deve-se indicar o abertamento e o fechamento na linha em questão (abertura: <p>; fechamento: </p>). Por exemplo, para eu indicar um título no código em uma linha de texto deve-se digitar assim:

  <h1> Exemplo de título </h1> 

> Outro exemplo, mas indicando um parágrafo:

  <p> Exemplo de parágrafo </p>

> Exemplo mais complexo com uma tag em que não é necessário indicar fechamento:

  <img src="foto.png" alt="Exemplo de foto">

    - "img src=" = abertura de tag; exibição de um arquivo de imagem.
    - "alt=" = parâmetro; a tag "alt" exibe o texto alternativo da imagem.

:::::::::::::::::::::::::::::
            CSS
:::::::::::::::::::::::::::::

> CSS significa CASCADING STYLE SHEETS, traduzindo: Folhas de estilo em cascata.
> O termo cascata na sigla tem como significado algo que vai modificando as características padrão uma das outras como se fosse em efeito cascata.
> A linguagem CSS é responsável pelo estilo e aparência de uma página, podendo tornar ela muito atrativa visualmente. Define cores, sombras, tamanhos, posicionamento, etc.
> A linguagem CSS consiste em conjurar seletores. Define o tamanho, a cor e o posicionamento de todos os elementos da página.
> Na página, os estilos ficam na tag "<style>", ondem podem ser desenvolvidos da seguinte maneira:

  h1 {
    font-family: Arial;
    font-size: 20pt;
    color: blue;
  }

    - "h1" = seletor; estilo do título 1. Dentro dos "{}" são as definições dos termos de estilo do seletor.
    - "font-family:", "font-size:", "color:", = declaração de propriedade; tipo da fonte, tamanho e cor, respectivamente. Neste caso, logo após os ":" é o valor, como também a definição da(s) propriedade(s) citada(s).

> Estrutura básica de documento HTML:

<!DOCTYPE html>
<html lang="pt-br">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport"
    content="width=device-width, initial-scale=1.0">
    <title>Document</title>
  </head>
  <body>
    <h1>Olá, Mundo!</h1>
  </body>
</html>

:::::::::::::::::::::::::::::
            JS
:::::::::::::::::::::::::::::

> Ao contrário das duas linguagens acima, Javascript é sim uma linguagem de programação. Em conjunto com a HTML e as CSSs, são todos responsáveis pela construção de um website.
> A função do Javascript é de elaborar interatividade dentro de um website, podendo o tornar mais prático e também mais atrativo. Com Javascript, é possível desenvolver menus, animações, popups, validações, etc.


===========================================================


AULA #06 - Frontend, Backend e Full Stack.

> O server é responsável pelo envio e manipulação dos dados que o site compõe, a maneira de interpretar o site com todas as tecnologias client-side na qual a envolve é papel do navegador efetuar.

:::::::::::::::::::::::::::::
       FRONT END DEV.
:::::::::::::::::::::::::::::

> Em relação a interatividade entre Server/Client: para todos os clientes, o server vai mandar uma cópia igual para todos que acessarem, isso é chamado de site estático.
> O desenvolvedor front-end é o programador que estuda e desenvolve a parte da interpretação das tecnologias client-side, na interpretação do navegador dos dados que o server irá mandar (HTML, CSS, e JS).
> Não se deve confundir web designer com desenvolvedor front-end, pois o web designer é responsável por projetar o site visualmente e utiliza ferramentas de edição de imagem. Apesar do desenvolvedor também necessitar de conhecimentos de edição, não é necessário especialização além do básico.

:::::::::::::::::::::::::::::
       BACK END DEV.
:::::::::::::::::::::::::::::

> O desenvolvedor back end é responsável por estudar e desenvolver a construção das tecnologias por trás do funcionamento server-side.
> As linguagens responsáveis pelo desenvolvimento server-side são: php, Javascript, C#, Python, Ruby e JAVA.
> As variáveis e as modificações que os dados de um website pode sofrer é papel do server-side resolver de acordo com as variáveis de acordo com certas situações.
> Por exemplo, em um website de e-commerce é praticamente impossível ser desenvolvido somente com front-end em um site estático, por consequência das variáveis do estoque dos produtos relativos. De acordo com um banco de dados (database) desse suposto e-commerce, o server-side irá mandar os dados solicitados pelo client-side de acordo com a linguagem de seu funcionamento e, dependendo da disponibilidade física dos produtos, exibir esses produtos para eventuais compradores efetuarem a compra. 

:::::::::::::::::::::::::::::
      FULL STACK DEV.
:::::::::::::::::::::::::::::

> Basicamente, o desenvolvedor full stack detém tanto conhecimentos front-end como back-end. É necessário um conhecimento profundo para ser reconhecido como desenvolvedor deste tipo.


===========================================================


AULA #07 - Instalando todas as ferramentas.

[...]


===========================================================


AULA #08 - Seu primeiro código HTML.

> Foi criado uma pasta própria para os arquivos do curso, bem como exercícios e desafios.
> Para o nosso primeiro código, é necessário criar um arquivo chamado index.html (como vimos anteriormente, index é como se fosse o "home" do site, uma página estática).
> Digite "html:5" ou "!"(espere 1-2 segundos) para surgir o código base para qualquer arquivo html.
> Como visto anteriormente nas aulas também, grande parte das tags(ex: <head>) tem um fechamento para a mesma(ex: </head>). EX:

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

> "<meta>" não possui fechamento.
> Para alterar a linguagem padrão da página é necessário mudar o parâmetro da tag "<html>" chamada "lang = en", para mudar para português é "pt-br".
> Toda página html possui duas tags principais: <head> e <body>.
> <head> = Configurações do site.
> <body> = Conteúdo do site.

> Dentro da tag <head>:
  > <meta charset="UTF-8> = UFT-8 é um suporte para conjunto de caracteres em que é possível, para além do alfabeto, caractéres com acentos.
  > <meta name="viewport" content="width=device-width, initial-scale=1.0"> =  "viewport" significa que a resolução de imagem da página irá cobrir a tela inteira; "initial-scale" em 1.0 significa que irá cobrir 100%.
 > <title> = como o nome da tag sugere, é o título da página que irá aparecer na aba do navegador.

> Dentro da tag <body>:
  > Por padrão, ficará vazia. Algumas tag abaixo:
    > <h1> = título de nível 1 (negrito, fonte maior)
    > <p> = parágrafo (texto comum)
    > <hr> = linha horizontal


===========================================================


Aula #09 - Parágrafos e Quebras

> Como nas aulas anteriores, vimos que o <p> é a tag para marcar o parágrafo.
> No código, independente de quantas linhas foram criadas com frases pela metade ou além disso, com a tag <p> a linha do parágrafo sempre ficará definida.
> A tag <br> serve para quebrar a linha, por exemplo:
 - No VS: <p>Deixar o parágrafo <br> Assim.</p>
 - No Navegador: Deixar o parágrafo
                 Assim.
> Como o colchetes acentuado (<>) define uma tag, para escrever um colchete no parágrafo é necessário utilizar o comando &gt; (<) &lt; (>), por exemplo:
  - No VS: <p>Para marcar o parágrafo, é necessário a tag &lt;p&gt; &lt;/p&gt;.
  - No Navegador: Para marcar o parágrafo, é necessário a tag <p> </p>.
> Para deixar comentários no código:
  - <!-- Comentário -->
> Significado dos simbolos utilizados no código:
  - &lt; = LESS THAN (Menor que)
    &gt; = GREATER THAN (Maior que)


===========================================================


Aula #10 - Simbolos e emoji no seu site

> Muitos iniciantes cometem o equivoco de utilizar vários "<br>" para dar espaço de várias linhas. Não é recomendado utilizar esta técnica pois se trata de uma maneira bastante amadora de realizar isso! (É melhor editar algo assim na folha de estilo CSS).
> Caracteres especiais:
  - https://www.w3schools.com/html/html_entities.asp
> Símbolos e emojis:
  - https://www.w3schools.com/charsets/ref_utf_symbols.asp
  - https://emojipedia.org
> Para adicionar emojis é um pouco diferente, basta colocar no começo "&#x" e depois o código referente ao emoji desejado. Por exemplo:
  - 🔥= &#x1F525;


===========================================================


Aula #11 - Você tem o direito de usar qualquer imagem em seu site?

> Para responder a pergunta do título é necessário contextualizar que a maior parcela das imagens que estão disponíveis para visualização na internet não podem ser usadas comercialmente pelos direitos autorais atreladas a mesma. Ou seja, não é possível utilizar essas imagens em futuros trabalhos ou em qualquer meio de natureza comercial.
> Mas tem um porém: Por exemplo, no Google Imagens é possível filtrar possíveis imagens que não possuem direitos autorais: Basta clicar em: (Pesquise a imagem na barra de buscas)>Ferramentas>Direitos de uso>Licenças Creative Commons.
> Existem também sites de banco de imagens em que as imagens são totalmente gratuitas para uso comercial. Como por exemplo:
  Pexels
  UnSplash
  FreePik
  Rawpixel
  Pixabay
  Libreshot
  Wikimedia Commons
> Futuramente, é muito importante profissionalmente se inteirar ao menos sobre o básico de direitos autorais e o ornamento jurídico no geral sobre essa área de atuação.
> Sugestão de editor de imagens gratuito e open source: GIMP.


===========================================================


Aula #12 - Quais são os formatos para imagens na Web?

> Existem diversos formatos de arquivos de imagem no geral, mas os mais utilizados são: ".JPG", ".PNG"; Em navegadores mais recentes é possível encontrar arquivos ".GIF" também.
> Afinal, qual o melhor? JPEG ou PNG?
> A resposta seria depende, ambos possuem suas características na qual podem ser usados de acordo com a ocasião.
> O JPEG é um dos formatos de imagem mais antigos do ramo (surgiu mais precisamente em 1983). A tecnologia que o formato JPEG proporciona é uma maneira de alta compactação de pixels com o intuito de deixar o arquivo o mais leve possível, facilitando a otimização e o carregamento.
> O formato PNG também possui tecnologia de compactação, mas não tão eficiente quanto o JPEG para também evitar a baixa resolução da imagem (consequência da alta compilação). Entretanto, o formato PNG se evidencia por ser possível modificar a transparência da imagem, sendo assim possível, por exemplo, deixar o fundo de uma imagem transparente.


===========================================================


Aula #13 - O tamanho das imagens importa para um site?

> Nesta aula é falado sobre formatações de imagens para se usar ao utilizar em websites funcionais na qual se está trabalhando.
> Ferramenta de edicão de imagem utilizado: GIMP.
> Tipos de imagens recomendados pelo curso:
  - Formato JPEG ou PNG: JPEG para imagens grandes/fotografias e PNG para imagens com transparência (desenhos/logos/etc...)
  - Dimensão: máx. 1200x800px e/ou valores aproximados.
  - Resolução: se possível, entre 50,00/70,00px.
  - Qualidade: entre 60%-70%.
> Ao editar a imagem de acordo com a preferência de trabalho, não é recomendado reescrever a imagem original, pois ao preservar a imagem original é possível reeditar em outros formatos possíveis e situacionais.
> O intuito de se fazer e formatar as imagens para uso do site é sempre manter a economia de dados, a performance e a otimização do site, mas não deixando de lado a qualidade da mesma.
> Um site em que é leve em tamanho de arquivo é mais facilmente visualizável e melhor de ponto de vista comercial.
> LEMBRE-SE: sites leves também aparecem facilmente no buscador do Google.


===========================================================


Aula #14 - A tag img em HTML5

> Para inserir imagens dentro de um website é preciso da tag <img src = "" alt = "">
> Dentro da tag img:
  - "src = "" " = O arquivo da imagem. Para seleciona-lo digite o nome do arquivo ou se ele estiver dentro de uma pasta: "src = "*pasta*/*imagem*" "
  - "alt = "" " = Texto alternativo da imagem. É um texto no qual descreve a imagem para fins de ser possível achar em pesquisas, para acessibilidade de pessoas com deficiência e etc...
> Para selecionar uma imagem = CTRL + ESPAÇO (irá aparecer uma janela na qual é possível selecionar o arquivo).


===========================================================


Aula #15 - Como mudar o favicon de um site

> Favicon é o o ícone ao lado do nome da guia em que se está visitando algum site específico, geralmente fica no topo da tela ao lado do nome do site (no código fica em <title>)
> Formato de imagem de favicon recomendado: ".ICO" (mas pode ser .PNG ou .SVG, mas pode haver problemas de compatibilidade com certos navegadores)
> Você pode criar um ícone do zero em um editor de imagem. O tamanho da imagem deve ser no mínimo 48x48 ou múltiplos disso (ex: 96x96, 144x144, etc.)

:::::::::::::::::::::::::::::

> Ícones prontos para baixar de graça: 
  - https://www.iconarchive.com
> Site para se desenhar um favicon do zero: 
  - favicon.cc
> Site para criar ícones baseado em alguma imagem/texto/emoji de referência: 
  - favicon.io

:::::::::::::::::::::::::::::

> Para colocar um favicon no código:
  - Digitar "link" e selecionar "link-favicon" e o próprio editor irá gerar o código.
  - Ou caso queira digitar o código: 
    <link rel="shortcut icon" href="" type="image/x-icon">
> LEMBRE-SE: Para selecionar o arquivo direto no código, aperte CTRL + ESPAÇO.


===========================================================


Aula #16 - Hierarquia de Títulos

> A tag <h1> e/ou sequências dessa tag é somente para declarar que tal linha é um título!
> Níveis hierárquicos seguem a sequência: <h1>, <h2>, <h3>, <h4>, <h5>, <h6>
  - Não deve-se pular a sequência;
  - Não são usados para definir tamanho da letra. Isso é feito em CSS;

> lorem: gerador de texto "lero-lero"
  - <p>lorem</p>
  - <p>loremN</p> <!-- OBS: Não é o nº de palavras que o texto terá. -->


===========================================================


Aula #17 - Semântica na HTML5 é importante

> Significado de semântica de acordo com o dicionário Michaelis On-Line.
  - [...]
    2. LING | O significado dos vocábulos, por oposição à sua forma
    [...]

    link: https://michaelis.uol.com.br/moderno-portugues/busca/portugues-brasileiro/semantica/#:~:text=1%20Ling%20Ramo%20da%20linguística,por%20oposição%20à%20sua%20forma.

> Ou seja, a linguagem HTML5, diferente da versão anterior a ela, está muito mais focada no significado e nos conceitos das marcações do que simplesmente na forma delas.
> Em outras palavras, tags antes usadas na versão anterior estão em desuso nos dias de hoje por justamente não atender a um significado semântico e sim a forma, algo aparente visualmente.
> Por exemplo, na versão anterior uma das possibilidades de retratar um endereço de uma rua poderia ser sublinhar a linha indicando-a, por exemplo:

  - <u> Rua Barriga Verde, 229 - Palhoça, Santa Catarina.</u>
  <!-- OBS: TAG <u> É OBSOLETA! -->
  
  Essa tag somente faz as letras serem sublinhadas, somente há uma diferença visual e não de um conceito por trás disso. Na versão atual, por exemplo, é possível declarar que certo trecho é um endereço no qual poderá ser redirecionado para um outro site/app de localização de ruas com uma simples tag:

  - <adress> Rua Barriga Verde, 229 - Palhoça, Santa Catarina </adress>

> Desta maneira o website na qual vai ser criado vai ser mais atual e otimizado para outros portes além do convêncional computador, seja em celulares, tablets, etc...
> Parte da forma e aparência do texto e do site em geral ultimamente é ligado somente à CCS3, sendo possível modificar toda a aparência desejável utilizando essa tecnologia em contra-partida do HTML5 (na qual é focado em semântica).
> Sites antigos que não se adaptaram a nova versão tendem a ser desvalorizados pelos buscadores de pesquisas e consequentemente serem menos vistos!
> É IMPORTANTÍSSIMO ficar de olho em eventuais novidades e obsolescências da linguagem para não cometer nenhum tipo de erro ou empecilho que isto possa causar.
> Site indicando tags obsoletas:
  - https://www.w3.org/TR/2014/REC-html5-20141028/obsolete.html


===========================================================


Aula #18 - Negrito e itálico do jeito certo

> Nesta aula, é criado um arquivo HTML para testar as tag representando a forma negrito e itálico.
> Respectivas tags sem semântica (HTML4):
  - <b> = negrito
    <i> = itálico
> Tags com semântica (HTML5)
  - <strong> = Negrito. Do inglês significa "FORTE", a tag é utilizada para dar sentido de destaque para certo trecho específico.
    <em> = Itálico. É uma abreviação da palavra em inglês "EMPHASIS" que significa ênfase para dar respectivo sentido a certo trecho.
> Essas tags não-semânticas não estão obsoletas em si, mas é recomendável não utilizá-las pois representa o ideário antigo da linguagem HTML e não está nos conformes do conceito que a linguagem possui nos dias de hoje. Portanto, deve-se utilizar tags atuais que dê "sentido" ao código gerado em contra-partida somente da sua forma.


===========================================================


Aula #19 - Formatações adicionais em HTML

> Texto Marcado
  - Para deixar o texto marcado, a tag utilizada é <mark>.
  - Essa tag deixa o fundo do texto com uma cor que realce o trecho, dando mais destaque e atenção a este.
  - Para mudar a cor (somente CSS) se utiliza o parâmetro style, ex: <mark style=""> <!-- texto aqui --> </mark>
  - Mudar a cor de fundo: <mark style="background-color: lime;"> <!-- texto aqui --> </mark>
  - Esta configuração dentro da tag como mostrado acima somente muda a cor da tag individualmente, para mudar a de todas as tag é necessário configurar direto no CSS.
  - Para isso devemos criar um seletor na tag <style>, ex:

    mark {
        background-color: lime;
    }

> Texto grande e pequeno
  - Texto grande: <big> (OBS: TAG OBSOLETA!, atualmente uma das opções pode ser mudar pelo CSS utilizando uma classe).
  - Texto pequeno: <small> (AINDA FUNCIONA).

> Texto deletado
  - Tag <del>.
  - Serve para destacar um trecho com um riscado como se fosse um rascunho ou rasura.

> Texto inserido
  - Tag <ins>
  - Mostra como se tivesse algo inserido no texto, o efeito é de sublinhado.
  - Tag não-semântica de sublinhado: <u>

> Texto sobrescrito/subscrito
  - Sobrescrito: <sup> / Subscrito <sub>
  - A tag <sup> eleva a posição do texto marcado e diminuir a fonte. Para representar cálculos matemáticos é ideal para servir como potência de algum algoritmo.
  - a tag <sub> decai a posição do texto marcado e diminuir a fonte também. Para representar fórmular químicas é ideal para servir como demonstração de número de alguma molécula.


===========================================================


Aula #20 - Códigos e Citações

> Códigos
  - A tag <code> serve para marcar o trecho do texto com fonte monoespaçosa, ou seja, todos os caracteres possuem o mesmo tamanho e espaçamento (ideal para leitura de códigos, pois se torna de fácil compreensão visualizar todos os caractéres)
  - A tag <pre> serve para organizar os espaçamentos e posições de parágrafos no código igualmente na visualização do site, ou seja, o texto no código ficará idêntico na parte visual.

  > OBS: SHIFT + TAB = recolher o espaçamento do(s) parágrafo(s).
         Somente TAB = aumentar o espaçamento do(s) parágrafo(s).
         CTRL + ; = trecho selecionado vira comentário.

> Citações
  - Simples: Tag <q>; Irá destacar o trecho com aspas visualmente, mas adicionará sentido semântico de citação no trecho.
  - Em Bloco: Tag <blockquote>; Irá destacar o trecho com espaçamento em bloco no parágrafo visualmente, é possível adicionar um parâmetro na tag chamado "cite=""" na qual poderá deixar um link indicativo da fonte ou algo relacionado à citação (modo semântico).

> Abreviações
  - Tag <abbr>, no parâmetro "title=""" poderá adicionar no trecho marcado como abreviado com o significado completo.

> Texto invertido (bem inútil)
  - Tag <bdo>, irá exibir o texto ao contrário, invertendo completamente o trecho. Tem um parâmetro obrigatório (dir="") onde só poderá ser: "ltr" ou "rtl" (left to right = esquerda para direita (não inverterá) / right to left = direita para esquerda).


===========================================================


Aula #21 - Listas OL e UL

> Listas Ordenadas
  - Gera uma lista em ordem numérica/alfabetica/numérica-romana.
  - Tag: <ol>
  - Parâmetros:
    - type:
      - 1 - Numérico;
      - A - Alfabeto Maiúsculo;
      - a - Alfabeto Minúsculo;
      - I - Romano Maiúsculo;
      - i - Romano Minúsculo;
  - Tag <li> serve para ordenar o parágrafo desejado. OBS: O VSCode coloca automaticamente o fechamento da tag (</li>), mas não é necessário.

> Listas não Ordenadas
  - Gera uma lista sem ordem definida, todos os trechos são marcados por um símbolo.
  - Tag <ul>
  - Parâmetros:
    - type:
      - Circle - Bolinha só com contorno;
      - Disk - Bolinha preenchida;
      - Square - Quadrado;


===========================================================


Aula #22 - Listas mistas e de definição

> Listas mistas
  - É possível fazer um aninhamento de listas tanto Ordenadas quanto não Ordenadas, ou seja, listas dentro de listas.
  - Pode ser qualquer tipo, <ol>'s dentro de <ul>'s, <ul>'s dentro de <ul>'s, entre outros...
  - OBS: Atenção ao organizar o aninhamento das listas, pois é fácil se perder.

> Listas de definição
  - Neste tipo de lista é possível marcar termos e seus significados similarmente ao padrão de um dicionário.
  - É ótimo por facilita ao algoritmo dos buscadores de pesquisa a identificar um site informativo de certo termo pesquisado pelo usuário.
  - tag <dl> = marca um grupo de termos.
  - tag <dt> = marca o termo.
  - tag <dd> = marca a descrição do termo marcado pelo <dt>.


===========================================================


Aula #23 - Links e Âncoras

> A grande importância dos links!
  - Basicamente, ao criar sites é necessário que o website seja adaptado aos mecanismos de busca para ter o maior número de visualizações possível.
  - NÃO É NECESSÁRIO FAZER ALGUM CADASTRO NO GOOGLE, o google que vai lhe encontrar! Porém é necessário um trabalho para que seja possível de ser encontrado pelo algoritmo.
  - Mais para frente, é recomendável estudar sobre o SEO (Search Engine Optimization) por ser muito importante para ter o alcance necessário no buscador.
  - Links são muito importante justamente por esses fatores citados, quanto mais links de qualidade e otimizados maior a probabilidade de ter o website no topo dos resultados.

:::::::::::::::::::::::::::::

> Links Externos
  - Tag <a> = Significa "Anchor", ou seja, âncora para um link dentro do termo marcado.
  - Fortemente recomendável que o link externo seja programado para redirecionar para uma nova guia do navegador! abaixo os parâmetros da tag para tal.
    - Parâmetros:
      - "href="*"" = dentro do asterisco (*) inserir a URL do site desejável.
      - "target="_blank"" = irá redirecionar o link em uma nova guia vazia.
      - "rel="external"" = irá relacionar a tag como link externo (para fins de pesquisa).


===========================================================


Aula #24 - Links Internos

> Mesma coisa que o externos, mas a diferença é selecionar o arquivo no "href" apertando CTRL+ESPAÇO dentro da pasta do website (pode haver caminhos dentro caso o arquivo que deseja selecionar esteja dedntro de uma pasta, ex: "caminho/página2.html").
> Parâmetros "rel"
  - acessar próxima página = rel="next"
  - acessar página anterior = rel="prev"
  - não referênciar a fonte = rel="nofollow"
  - referênciar a fonte = rel="dofollow"
  - abrir site na mesma aba do navegador = rel="_self"
> Para selecionar um arquivo em uma pasta ANTERIOR ao que o arquivo aberto esteja localizado, devemos utilizar "../" no caminho do arquivo selecionado. ex: ...href="../arquivo.html".


===========================================================


Aula #25 - Links para download


> Para fazer um link de download é necessário ter uma tag <a> referênciando o caminho do arquivo (dentro da pasta do site).
> Em seguida, utilizar parâmetros "download="nomedoarquivo.pdf"" e também "application/pdf" (pode mudar de parâmetro dependendo do tipo do arquivo).
> Ex: <a href="pasta/arquivo.zip" download="arquivo.zip" application/zip>Download "arquivo.zip"</a>
> Lista de referência de todos os parâmetros utilizáveis de tipo de arquivo: 
  - https://www.iana.org/assignments/media-types/media-types.xhtml


===========================================================


Aula #26 - Desafios propostos

> Desafios propostos no vídeo (mais detalhes no material didático do github).
[...]


===========================================================


Aula #27 - Imagens Dinâmicas

> Nos dias atuais, cada vez mais se produz aparelhos com conexão com a internet (exemplo disso são as SmarTVs, Tablets, etc...) e no mesmo modo surge diferentes tipos de resoluções de tela em que os websites devem se adaptar.
> Ao se produzir um website, deve-se levar em conta os diferentes tipos de telas que podem acessar a página e em sequência a maneira em que a formatação das imagens e do site como um todo deve se comportar em cada tipo de tela possível.
> A própria linguagem HTML5 fornece o suporte necessário para essa adaptação, mas também se torna importante ter atitudes em que isso também seja facilitado.

>> (Sequência usando GIMP e codando no VS.)

[...]


===========================================================


Aula #28 - Imagens que se adaptam sozinhas

> Nesta aula é criado um novo exercício no qual se deve codar uma adaptação para diferentes dispositivos móveis.
> Entrando em outros nuances, a experiência de usuário é MUITO importante para se ter um site de sucesso, assunto que muitas vezes ou é esquecido, rejeitado ou ignorado.
> De acordo algoritimo do Google, se o usuário acessar o site de primeira vista e sair em seguida que entrou é levado em consideração por uma taxa chamada Out-Bounce Rate, na qual se tiver um alto índice, o buscador irá deixar de indicar o site frequentemente.
> Por esse ponto, é muito importante adaptar as imagens utilizadas no site para diferentes dispositivos de tamanhos de telas diferentes para melhorar a experiência do usuário, deixando o site bonito e agradável.
> Tag <picture>: Utilizar para colocar diferentes imagens para exibir de acordo com o tamanho da tela.
> Use essa tag dentro de <picture>:
  - <source media="(min-width: *tamanho máximo da largura da janela para exibir*)" srcset="*localização da imagem*" type="image/*tipo de arquivo da imagem*">.
  - DICA: utilizar +50px como folga da barra de rolagem para evitar gerar barra de rolagem lateral.
> Neste exercício foi utilizada 3 imagens de tamanhos diferentes, mas é possível criar mais múltiplas opções necessárias para tamanhos de telas.
> OBS: NÃO INVERTA A ORDEM DAS SOURCES!!! deverá sempre nas primeiras linhas das imagens menores para maiores assim como está no exercício, caso contrário não irá funcionar corretamente.


===========================================================


Aula #29 - Colocando áudios no seu site

> Aqui aprenderemos como colocar áudios tanto para tocar assim que o acessar ou inserir um painel de controle pequeno para tocar o áudio.
> Tipos de arquivos: .MP3, .OGG e .WAV.
> Uma dica de quais audios ou tipos de arquivos utilizar é sempre utilizar .MP3 ou .OGG por serem compatíveis com a maioria dos navegadores e também por serem arquivos leves (o tamanho dos arquivos de áudio também conta para se ter um site buscável pelo Google). Arquivos .WAV não é recomendado por serem muito pesados, apesar de serem arquivos de alta qualidade, mas ao criar sites: Desempenho >>> Qualidade (SEMPRE!!!).
> Para se inserir audios, a tag utilizada é <audio>.
  - Alguns parâmetros mais utilizados:
    - autoplay = toca assim que acessar a página; irá tocar sozinho. (obs: dependendo do navegador não funciona)
    - controls = exibe um painel para dar play, pausar, etc..
    - loop = quando o áudio acaba irá tocar tudo de novo em um processo de looping.
    - preload = pré-carregar o áudio com alguma opção deste parâmetro. (não recomendado usar o "auto")
> Há duas opções de como inserir áudios na página.
> Opção 1
  - <audio href="*caminho do áudio*"> </audio>
> Opção 2
  - <audio><source src="*caminho do áudio*" type="*parâmetro do tipo de arquivo*" </audio>
  - OBS: nesta opção é possível colocar mais opções de arquivos de áudios usando mais tags <source> dentro de <audio> no caso de algum navegador não suportar certo tipo de arquivo, como também uma mensagem de texto (<p>) dizendo que o tipo de arquivo não foi carregado.
> OBS: O mesmo papo sobre direitos autorais cola aqui também sobre o uso de áudios. TOME CUIDADO AO UTILIZAR ÁUDIOS DE TERCEIROS!!!


===========================================================


Aula #30 - Formatos de vídeos para seu site

> A princípio, não é recomendado utilizar videos incorporados diretamente do site do servidor por questão de uso da banda da hospedagem (e isso pode custar muito caro).
> Mas, caso não há opção de utilizar vídeos incorporados do Youtube, Vimeo, etc... (no qual será visto mais tarde como fazer isso) existem programas que decodificam vídeos para formatos, resoluções e tamanhos de arquivo com maior optimização e desempenho de carregamento.
> Programa recomendado: HandBrake (open source e muito fácil de utilizar)


===========================================================


Aula #31 - Videos em hospedagem própria

> Tag para inserir video: <video>
> Parâmetros:
  - controls: ''
  - autoplay: ''
  - width: tamanho do vídeo na tela.
  - poster="": thumnail/capa do vídeo.
> Assim como a opção 2 de como inserir áudios, também se usa a tag <source>:
  - <video><source src="*caminho do video*" type="*parâmetro do tipo de arquivo*"</video>
> OBS: formato .mkv usa o media type "video/mp4" também!


===========================================================


Aula #32 - Incorporação de videos externos

> Como falado anteriormente, hospedar o video por conta própria pode custar o olho da cara para algum cliente futuramente pela razão do uso da banda larga limitada usado por várias pessoas ao visitar o site.
> Hospedar o video no site é únicamente viável caso o cliente esteja ciente disto e que seja da maneira em que o mesmo deseja prosseguir na criação do site.
> Mas existe uma outra opção além de hospedar o video na qual se torna muito menos custoso e trabalhoso para se manter: Incorporar um video de uma plataforma externa.
> Ao incorporar um video ao seu site, não é necessário se preocupar com o custo que poderá gerar, pelo qual com essa opção terá um custo mínimo.
> Para incrementar algum video do YouTube ou qualquer outra plataforma de hospedagem de vídeos:
  - Selecione o vídeo > Clique em Compartilhar > Selecione Incrementar.
> Por padrão, a maioria das plataformas oferece essa opção acima. Logo após surgir o código pronto deve-se copiar e colar no seu site e editar do jeito que achar melhor.
> Existem muitas opções no mercado de plataformas de hospedagem de vídeos, mas as mais recomendadas seriam o YouTube e o Vimeo por possuírem uma qualidade maior comparado a outras plataformas.
> A diferença entre essas duas opções seria quem será possibilitado de visualizar o vídeo, por exemplo, caso queira colocar vídeo-aulas para quem puder assinar o serviço o YouTube não oferece essa possibilidade, mas o Vimeo sim.
> A vantagem de se utilizar o Youtube seria o algoritmo (caso alguma pessoa acesse o site e assista o video, irá travar muito menos que o Vimeo).
> A vantagem do Vimeo seria pela qualidade e pela exclusividade de exibir para pessoas "escolhidas".


===========================================================


Aula #33 - Desafio: um site com vídeos

> Desafios propostos no vídeo (mais detalhes no material didático do github).
[...]


===========================================================


Aula #34 - Estilos CSS inline

> Nesta aula, iremos ter o primeiro contato "oficial" em edição das CSS, bem como o tipo mais fácil, simples mas limitado de fazer isso na qual se chama "CSS Inline".
> O "Inline" significa "Na linha", ou seja, é uma técnica na qual seria editar o estilo de um parágrafo, título, ou qualquer marcação na mesma tag individualmente.
> Para isso, devemos utilizar o parâmetro "styles" dentro da tag que deseja editar.
> Em outras palavras, o estilo da marcação é editado individualmente dentro da própria tag que define a linha. Por exemplo:
  - <body styles="background-color: lightskyblue;">
> Usando em tags de parágrafos ou títulos, irá mudar somente o estilo dessa mesma tag em que está o parâmetro, por exemplo:
  - <h1 styles="color: mediumblue;">Título 1</h1>
> Em questão de praticidade, este método é o pior de todos, só ressalvando em situações muito opcionais e específicas na qual é necessário alterar um único ponto da página.
> Não é recomendado utilizar códigos de CSS com HTML por questão de organização e intuitividade na hora de produzir seus códigos, pois com os códigos misturados a impressão que pode causar é de desordem e poluição.


===========================================================


Aula #35 - Estilos CSS internos

> É explicado nesta mesma aula uma técnica melhorada em contraste ao primeiro contato na qual se teve com o CSS. Esta técnica se chama "Estilos Locais(Internos").
> Para utilizar este método, simplesmente é criado uma tag <styles> dentro da parte <head> do HTML.
> Utilizando seletores (chaves: "{ }"), é possível editar múltiplos elementos semelhantes com uma única linha. Exemplo:

  <styles>
  body {
  background-color: cornflowerblue;
  font-family: Arial, Helvetica, sans-serif;
  font-size: 14px;
  }
  </styles>

OBS: final de cada linha utilizar ponto e vírgula (;)

> Como mostrado no exemplo acima, foi alterado inteiramente a parte <body> do html em um único bloco. É possível também alterar todos os elementos da página de acordo com a prefêrencia.
> Comparado com o método anterior "Inline", esta maneira se mostra superior no quesito de organização e simplificação do código. Porém, quando se trata em alterar mais de uma página HTML de um site, a complicação se dá na burocracia da possibilidade de ter que mudar periodicamente as CSS das páginas, pois vai ser necessário alterar uma por uma.


===========================================================


Aula #36 - Estilos CSS externos

> Como mostrado nas aulas anteriores, é demonstrado exemplos e tipos de métodos diferentes e situacionais para modificar as CSS.
> O Estilo CSS externo se destaca de todos os anteriores por ser muito mais versátil e prático na situação de manejar múltiplas páginas que possuem o mesmo estilo ou estilo muito similar trazendo a possibilidade de criar um arquivo próprio códigos de CSS.
> Para utilizar esta técnica é muito simples: na parte do <head>, utilize o comando (só escrever no código) "link:css" e o código irá aparecer. Nesta linha de código, é relacionado um arquivo chamado "style.css" (na qual poderá ser modificado o nome como quiser) revelando a opção de criar o arquivo na pasta da página HTML.
> Com um arquivo na qual separa o CSS com o HTML, é possível utilizar os mesmos estilos para múltiplas páginas usando somente um comando sem ter o trabalho de modificar as CSS uma por uma de cada página.
> É possível linkar mais de um arquivo CSS na página, na qual será somado os 2 arquivos dentro da mesma página HTML em que estão inseridos. Exemplo:

<link rel="stylesheet" href="style.css">
<link rel="stylesheet" href="style2.css">

> Qual é a melhor técnica?
- Na realidade, cada método é específico de cada situação: "Inline" é recomendável somente para ajustes pontuais e muito pequenos. O "Interno" é recomendável para ajustes pequenos mas que abranjem uma área maior e mais elementos de uma página. E o "Externo" deve-se utilizar SEM MODERAÇÃO, devendo ser prioridade e utilizar como base para qualquer projeto.
> É possível também utilizar todas as técnicas combinadas em uma única página, sendo possível não se restringir a uma só maneira de codar os estilos do site.
> A hierarquia de mudanças vai do mais específico ao mais geral, ou seja, o "Inline" vai se sobressair do "Externo" por ser mais específico, etc.


===========================================================

	MÓDULO 02 - Deixando as coisas mais bonitas

===========================================================


Aula #01 - Psicologia das cores
> No quesito do amplo repertório que é de suma importância e de destacamento, a psicologia das cores é (se não) a mais significativa dentre todas.
> Estudos revelam que as cores podem determinar uma abrangente visualização em até 90% em comparacão a sites que não possuem a determinação entre a sintonia harmônica do site com a paleta de cores escolhidas no design.
> No material em pdf, no arquivo do módulo 2 - capítulo 3, há uma tabela indicando o que cada cor remete e a recomendação em utilizar dependêndo do tipo de site em que vá desenvolver.
> Uma curiosidade é que a cor azul apresenta a maior taxa de aceitação e a menor rejeição comparada a outras cores, por isso, é bem comum a maior parte das empresas adotarem essa cor como identidade visual por conta disto.

> Psicologia das cores:
  - Azul: competência, sabedoria, calma, frio;
  - Vermelho: amor, emoção, energia, raiva, perigo;
  - Verde: saúde, natureza, dinheiro, sorte, inveja;
  - Rosa: amor, romance, sinceridade, cuidados;
  - Marrom: terra, robustez, estabilidade, amizade;
  - Roxo: criatividade, poder, sabedoria, mistério;

> OBS: É necessário ter em mente que a psicologia das cores NÃO é uma verdade absoluta, existem sites que mesmo indo em contramão o significado das cores fazem grande sucesso nas redes.


===========================================================


Aula #02 - Representando cores com CSS3
> Nesta aula veremos diferentes maneiras de declarar cores nas CSS3 no código HTML5.
> Para representar uma cor é usado um sistema chamado RGB, no qual poderá demonstrar qualquer cor possível definindo a quantidade de vermelho, verde e azul, respectivamente com a sigla em inglês.
> O valor mínimo de cada variável da cor é 0 e a máx 255.

> Representação por nomes:
  - No arquivo do exercício da aula usaremos a técnica de estilos inline para fins didáticos.
  - Basta digitar um nome de uma cor (somente em inglês) que uma cor pré-definida irá surgir no código. 
  - style="background-color: blue; color: white;"

> Representação por códigos hexadecimais:
  - Hexadecimal : 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F (representação de 16 caracteres com unidades numéricas e letras com 1 unidade. Valor mín: 0 ;  Valor máximo: F)
  - Para simplificar a ideia temos exemplos de código hexadecimal:

  - style="background-color: #0000ff; color: #ffffff;"
  - "#0000ff" = vermelho: 0,0 (primeiros 00s) ; verde: 0,0 (terceiro e quarto 00s) ; azul: 255 (últimos caracteres FF, valor máximo).
  - #ffffff = vermelho: 255 ; verde: 255 ; azul: 255.

  - Ou seja: primeira cor é azul, a segunda é branco.

> Representação RGB:
  - Decimal: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9. (representação de 10 caracteres com 1 unidade numérica)
  - style="background-color: rgb(0, 0, 255); color: rgb(255, 255, 255);"

> Representação do próprio VSC:
 - Basta setar uma cor pré-definida. Logo após, no quadrado que representa a cor, passar o mouse em cima e irá aparecer uma palheta RGB para mudar a cor manualmente.


===========================================================


Aula #03 - Harmonia de cores

> Nesta aula veremos um estudo breve sobre a harmonização de cores que devem ser utilizadas no desenvolvimento de sites.
> Essa matéria não pertence a este curso em específico, mas sim para estudos de design. Sendo assim, observaremos de maneira supeerficial com o intuito de criar sites intuitivos visualmente e a importância da seleção de cores como maneira de melhorar a estética que o site vai desempenhar.
> Dentro da teoria das cores, precisamos separá-las em grupos para que possamos decidir se as escolhas que vamos fazer para o nosso site vão fazer um sentido harmônico. A base para isso é conhecer o círculo cromático e compreender as suas sub-divisões.
> OBS: Na pasta de estudos na qual estarão os arquivos usados durante o aprendizado, estará o pdf desta aula de cores no qual irá mostrar o círculo cromático 12 cores e as derivações que podem ser usadas.

> Cores primárias:
- amarelo
- vermelho
- azul

> Cores secundárias:
- laranja (amarelo+vermelho)
- violeta/roxo (azul+vermelho)
- verde (azul+amarelo)

> Cores terciárias:
- Amarelo-esverdeado (amarelo+verde)
- Amarelo-alaranjado (amarelo+laranja)
- Vermelho-alaranjado (vermelho+laranja)
- Vermelho-arroxeado (vermelho+roxo)
- Azul-arroxeado (azul+roxo)
- Azul-esverdeado (azul+verde)

> Temperatura e Harmonia
- Ao separar no meio do circulo cromático as cores, é dividido entre elas o conceito de cores frias e quentes.
- As cores quentes, criam uma sensação de calor e proximidade. Já as cores frias, estão associadas a sensações mais calmas, de frescor e tranquilidade.
- Cores quentes: amarelo, laranja, vermelho e derivações destas anteriores.
- Cores frias: azul, verde, roxo e derivações destas anteriores.

[OLHAR PDF PARA VER DIFERENTES TÉCNICAS DE PALETA DE CORES!]

> OBS: ESCOLHER ENTRE 3 - 5 CORES PARA SUA PALETA DE CORES!


===========================================================

Aula #04 - Paleta de cores
> Nesta aula veremos as principais ferramentas que podem ajudar a montar a sua paleta de cores gratuitamente e na internet!
- https://color.adobe.com
- https://paletton.com
- https://coolors.co


===========================================================


Aula #05 - Como capturar cores da tela?

> Foi visto nesta aula diferentes maneiras de como capturar códigos de cores na internet de interesse de desenvolvimento do site.
> Uma das ferramentas recomendadas práticas e totalmente gratuita é a extensão de navegador chamado "Colorzilla". Nele, é possível selecionar com o mouse um conta-gotas que da a possibilidade de resgatar uma cor qualquer de um site e gerar na área de transferência o código da cor.
> Também foi visto outras possibilidades, por exemplo, usando o "coolors.co" e o "color.adobe.com" em que nos mesmo possuem ferramentas para isso.


===========================================================


Aula #06 - Como fazer degrade no CSS3

> Nesta aula aprenderemos a como deixar o fundo (background) com efeito gradiente, ou degrade.
> Usaremos os seguintes comandos nas CSS (em qual modo de técnica que seja) do arquivo da aula:

        * {
            height: 100%;
        }

- O asterisco significa que o bloco é uma configuração global da página, sendo assim, abranjendo todos os elementos.
- O "height" significa a altura da página. Para o gradiente funcionar e não ficar "zebrado" é necessário ser aplicado à página inteira (100%). OBS: "90%" não gera barra de rolagem.

:::::::::::::::::::::::::::::

        body {
            background-image: linear-gradient(to bottom, #9EEBFB, #4D737A); 
            background-attachment: fixed;
        }

- O "background-attachment: fixed;" é usado para fixar a imagem gerada não importe se rolar a página ou não. Neste caso sem essa configuração o site vai gerar uma barra com uma cor sólida no final.
- O "background-image" é o comando que irá fazer a imagem gradiente. Não é o "background-color" pois é somente cor sólida.
- Dentre os parâmetros do comando acima está o "linear-gradient" para criar um gradiente estilo linear. Outra opção seria o "radial-gradient(circle)" para efeito círculo.
- "(to bottom,#9EEBFB, #4D737A)" seria efeito para baixo (pode ser também "to top", "to left" ou "to right"). Neste tipo o primeiro código de cor ficaria no topo até abaixo com a última cor conjulgada (pode ser 2 ou mais cores).
- É possível codar quantos graus de um angulo poderá ser a direção do gradiente, basta colocar o número de quantos graus e a abreviação "deg" na mesma palavra. EX: 
 				
background-image: linear-gradient(45deg , #9EEBFB, #4D737A); 
				   ^^^
- Também é possível configurar quantos porcentos uma cor vai ocupar a tela, basta colocar a porcentagem ao lado da cor. EX:

background-image: linear-gradient(to bottom, #9EEBFB 80%, #4D737A); 
						     ^^^
:::::::::::::::::::::::::::::

> CUIDADO! Não utilize cores demais somente em um gradiente. A ideia é utilizar de 3 até no máximo 5 cores para a imagem do site não apresentar um aspecto de poluição visual e por acabar por não atrair os visitantes.


===========================================================


Aula #07 - Criando um exemplo real

> Nesta aula iremos reproduzir um exemplo de uma página utilizando os conhecimentos já adquiridos durante o curso (principalmente para treinar os conhecimentos de CSS33)
> 📝 LEMBRE-SE!

<main>	->	div especial, indica que o conteúdo é principal

width	->	largura da caixa

padding	->	espaço lateral do texto dentro da caixa

margin	->	margem do texto (auto, 3px, ...) 

text-align	->	alinhamento do texto (center, end, justify, ...)

border-radius	->	cantos da caixa arredondados

box-shadow / text-shadow	->	so mbra da caixa

    - parâmetros: tam. sombra p/ lado, tam. sombra p/ baixo, espalhamento, cor;

	Ex:	box-shadow: 5px 5px 15px rgba(138, 111, 95, 0.616);
		text-shadow: 1px 1px 2px rgba(129, 78, 5, 0.733);

(Comentário copiado de comentário do YouTube)


===========================================================


Aula #08 - Primeiros passos em Tipografia

> O que seria Tipografia?
- Logo após a mecanização de escritas com a máquina de impressão, a Tipografia surgiu com a necessidade de ter letras que sejam fáceis de compreender e melhorar a leitura. 
- O significado etmológico vem de duas palavras: O "Tipo" vem do grego "Týpos" que significa impressão; E "grafia" vem também do grego "Graphía" que significa escrita.
- Portanto, a razão por trás da Tipografia é de como realizar a escrita sobre algo no papel.
> Junto com as combinações de cores e Tipografia, visualmente demonstram e descrevem algo através de um estilo para complementar o significado estético do desenvolvimento que representa o site ou algo referente.
> Em matéria de design, para fabricar um site completo em parte visual é almejado 3 tópicos: boas imagens, cores e tipografias.


===========================================================


Aula #09 - Anatomia do tipo

> Anatomia do tipo seria a definição da fonte das letras, a análise do grupo e origem na qual pertence.
> O tipo mais comum seria o Times New Roman, usado por muitos anos e sendo de origem derivada das letras sub-romanas.
> É importante destacar que a análise do tipo leva não só o grupo ou somente a uma definição, mas também a congruência da noção de espaço na tela, o espaçamento, o que pode representar de um contexto variado, etc...
> A letra "x" é uma letra bastante importante na construção de uma fonte de letras. Nela, de acordo com a altura do desenho da letra, vai servir de métrica para o restante das letras minúsculas da fonte, chamada assim de "Altura X".
> E se espelhando na "Altura x", relativamente é definido também o espaçamento vertical na qual é chamada de "Altura das Maiúsculas".
> Algumas letras "vazam" o tamanho tanto pra cima (ex: "l,t,f) quanto pra baixo (ex: "g,y,q") e são definidas como tamanhos "ascendente" e "descendente", respectivamente.
> A totalidade da altura vertical de todos os termos citados é chamado de corpo.
> Dependendo da fonte algumas dessas medidas são obsoletas por não haver nenhuma definida por motivo que seja, sendo assim, não sendo regra para todos os tipos de fontes de diversos tipos existentes usar essas métricas.
> Dentro dos tipos, existem as medidas geométricas, nas quais podemos citar e detalhar superficialmente abaixo:
  - Hastes: Retas dentro de uma representação da letra. Podemos observar e contar essas retas, por exemplo, pelo caractér "A"(2 hastes).
  - Filete: Retas menores que unem hastes e\ou arcos. Ex: "A"(2 hastes; 1 filete).
  - Arcos: Curvaturas que estão entre hastes, fazendo a união para representar o caractér. Ex: "n" (curvatura entre as 2 hastes).
  - Esporão: "Saltinho" que demontra uma figuração que está segurando a letra embaixo da haste como se a gravidade física tivesse efeito no quadro. Ex: "B" (em Times New Roman, está na parte inferior esquerda).
  - Vértice: Ponta superior onde termina 2 hastes. Ex: "A"(superior).
  - Terminal: Uma outra espécie de "filete" mas que não une hastes. Ex: "r"(lado direito).
> Medidas humanizadas:
  - Braço: Outra espécie "filete", mas não une hastes também e sempre está em uma direção para cima diagonal. Ex:"K"(lado direito indo pra cima).
  - Perna: Relativamente cumpre a mesma função do "braço", mas diferente deste, aponta para baixo. Ex:"K" também(lado direito inferior).
  - Pé: Serve para representar o mesmo que o nome sugere. Como na anatomia humana, está no final da "perna".
  - Espinha: Em algumas fontes existe na letra "S". Seria a curvatura em formato de cobrinha que une os arcos.
  - Barriga: Lembrando mesmo uma barriga, Une dois arcos fazendo com que seja condizente com o termo. União de dois arcos. Ex: "b".
  - Olho: Área interna fechada por todos os lados, remetendo a um olho físico. Ex: "Q".
  - Orelha: Com uma forma e semelhança de formato visual, a orelha ocupa a parte superior do caractér. Ex: "g"(Times New Roman).
  - Cauda: Parece com uma espinha mas ocupa a pare inferior do caractér, podendo ser fechada igual o olho ou aberta, remetendo a uma cauda animal. Ex: "g"(pare inferior com curva).
> Cada caractér do alfabeto representa um glifo, e um conjunto de glifos podem ter uma família tipografia.
> Uma família tipografica seria formas de um mesmo glifo em diferentes tamanhos de grossura (Algumas fontes não possuem família tipográfica). Das mais finas as mais grossas seriam: light, normal, seminegrito, negrito, extranegrito. (Em inglês, substitua o "negrito" por "bold").
> E um conjunto de glifos representa uma fonte, sendo a mesma dividida em categorias.
> Categorias de fontes:
  - Serifadas (ex: Times New Roman): fontes com serifa, como o nome sugere.
  - Sans-serif (ex: Arial): do francês significa "sem serifa".
  - Monoespaçadas (ex: Courier): são fontes não serifadas em que o espaço lateral de todos os caractéres possuem o mesmo tamanho.
  - Handwriting: fontes que simulam um texto escrito à mão.
  - Display: fontes que não se encaixam ou possuem poucas caracteristicas semelhantes com as medidas e as regras anatômicas que regem as diferentes categorias acima, são conhecidas também como "fontes comemorativas".


===========================================================


Aula #10 - Famílias de fonte com CSS

> No Visual Studio Code, iremos nos aprofundar relativamente nos comandos "font-family".

:::::::::::::::::::::::::::::

Font-family mais comuns:    Arial, Verdana e Helvetica
	
	font-family: 'Courier New';	-> nomes compostos precisam de 'aspas'
	font-family: sans-serif;	-> qualquer fonte sem serifa
	font-family: serif;		-> qualquer fonte com serifa
	font-family: monospace;		-> qualquer fonte monoespaçada

Safe combination:

	link: https://www.w3bai.com/en-US/cssref/css_websafe_fonts.html#gsc.tab=0

	Ex:	font-family: Arial, Helvetica, sans-serif;
		font-family: 'Times New Roman', Times, serif;

 *Dica: Após "font-family:", ao clicar Ctrl + Espaço, o VS Code sugere as principais safe combinations.

:::::::::::::::::::::::::::::


===========================================================


Aula #11 - Tamanho de fontes e suas medidas

> Existe uma ampla discussão entre a comunidade sobre qual a melhor forma de medição de fontes. Nesta aula, iremos aprofundar sobre isso.

:::::::::::::::::::::::::::::

Medidas Absolutas: 

	cm, mm, in, px, pt, pc

Medidas Relativas:
            
	em	->	relativo ao tamanho da fonte do elemento pai
	ex	->	relativo a altura x da fonte
	rem	->	tipo em, mas relativo a fonte raiz (body)
	vw	->	relativo a largura da view port
	vh	->	relativo a altura da view port
	%	->	porcentagem

Recomendação w3c:  "px" ou "em"

OBS: Apesar do "em" ser recomendado, ele é baseado no tamanho da configuração do elemento pai, podendo assim com um tempo codando o tamanho de certos elementos ficarem o dobro ou o triplo do tamanho original do elemento configurado. O "rem" é baseado no tamanho configurado padrão no navegador de 16px, sendo nesses casos melhor de se utilizar de maneira mais geral.

DICA: Para melhor utilização da medida "rem", defina nas CSS:

	html{
		font-size: 62.5%; /* = 10px */
	}

Assim fica fácil de utilizar "rem". Por ex, para definir o equivalente a "16px" em algum elemento seria o mesmo que "1.6rem".

:::::::::::::::::::::::::::::


===========================================================


Aula #12 - Peso, estilo e shorthand

> Nesta aula iremos ver sobre peso da fonte, como também uma maneira de simplificar as configurações com uma "shorthand": um comando de uma única linha que simplifica todas essas características.

:::::::::::::::::::::::::::::

Peso (negrito):	

	- fonte mais cheia (negrito) ou fina
	- não serve para fontes simples (arial, verdana, times,...)
	- serve pra fontes como Work Sans (import do google fonts)

	font-weight: nome ou número;

	nome:	- lighter		número:	- 100	- 200
		- normal			- 300	- 400
		- bold				- 500	- 600
		- bolder			- 700	- 800	-900

Estilo (itálico):

	font-style: valor;		valor:  - normal
						- italic

Decoração (sublinhado):

	text-decoration: underline;


Shorthand font: simplificando fontes.

Ex:	font-family: 'Work Sans', sans-serif;
	font-weight: bolder;
	font-size: 3em;
	font-style: italic;

Simplificando:

	font:  italic  bolder  3em  'Work Sans', sans-serif;

- A sequência deve ser:	

	font-style   ->   font-weight   ->   font-size   ->   font-family;

- Não precisa ter todas as propriedades, mas a sequência deve ser seguida;

Ex:	font: bold 2em 'Work Sans';

:::::::::::::::::::::::::::::


===========================================================


Aula #13 - Usando Google Fonts

> Nesta aula serve de aprendizado de como usar o Google Fontes: Um "banco de dados" de fontes da Google - sabendo também como utilizar.
> URL: https://fonts.google.com
> No site, selecione a categoria de fonte como também as relativas configurações específicas.
> Em "view selected families", copiar o código da fonte entre <style> e colar nas primeiras linhas parte de estilo CSS, antes dos parâmetros:
-	@import url ('link css2
	family = Kaushan+Script&display=swap');
> Em um espaço mais abaixo, há também o código para inserir a fonte em um elemento do CSS:
-	font-family: 'Work Sans', Arial, Verdana, sans-serif;
> Dica: Antes de copiar o código do Google Fonts, desativar a tradução, pois ela cria espaçamentos, troca vírgulas por pontos e altera a escrita de algumas palavras no site.


===========================================================


Aula #14 - Usando fontes externas baixadas

> Veremos como utilizar fontes adquiridas de outras formas além do método aprendido na aula anterior.
> Existem diversas formas de conseguir arquivos de fontes personalizadas na internet. Uma das formas que foi utilizada na aula foi acessar o site "https://www.dafont.com/pt/".
> Ao selecionar a fonte e efetuar o download, a maior parte sempre vem com 2 tipos de arquivos: ".ttf" e ".otf".
> Além desses 2 tipos, existem mais citados abaixo que podem conter junto com a fonte baixada:
> Agora indo para a página do código, para adicionar a fonte é necessário usar as seguintes linhas de códigos (fonte baixada: 'SplitOn').
-	@font-face {
	font-family: 'SplitOn';
	src: url(fonts/SplitOn.otf) format('opentype'), url(fonts/SplitOn.ttf) format('truetype');
	font-weight: normal;
	font-style: normal;
> O código principal para declarar a fonte no código é o "@font-face".
-	font-family = nome da fonte (pode ser qualquer um);
	src:url() = caminho do arquivo da fonte;
	format() = formato do arquivo; Pode ser um desses abaixo:
	-	opentype	(.otf)
		truetype	(.ttf)
		embedded-opentype
		truetype-aat	(Apple Advanced Typografy)
		.svg		(Scalable Vector Graphics)
	font-weight = definição de peso padrão;
	font-style = definição de estilo padrão.


===========================================================


Aula #15 - Capturando as fontes usadas em um site

> Nesta aula veremos como identificar e capturar fontes de páginas da web utilizando uma extensão semelhante ao "Colorzilla".

> Extensão para capturar fontes na tela: 
==> Fonts Ninja
> Baixe a extensão na Chrome Web Store e instale! 
==> https://chrome.google.com/webstore/detail/fonts-ninja/eljapbgkmlngdpckoiiibecpemleclhh
> Como usar?
==> Clique no ícone da extensão Fonts Ninja e apontar para algum texto que queira identificar a fonte.


===========================================================


Aula #16 - Alinhamento de textos com CSS

> Nesta aula veremos as diferentes formas de alinhar um texto usando CSS.
> LEMBRE-SE: Efeitos no qual muda-se apenas estéticamente, aparência e/ou design se usa-se somente CSS!
	Tags como <center> na HTML5 são obsoletas, NÃO USE!

:::::::::::::::::::::::::::::

> Mudar posição de alinhamento do texto:
	text-assign:
	==> justify	(alinhar lado direito e esquerdo, texto justificado)
	==> center	(centralizar o texto no meio da linha)
	==> left/right	(direita/esquerda, respectivamente)

Ex:	h1{
	text-assign: center;
	}


> Adicionar espaçamento no início igual parágrafo de redação:
	text-incident:
	==> inserir tamanho do espaçamento

Ex:	p{
	text-incident: 3rem /* 30px */
	}

:::::::::::::::::::::::::::::


===========================================================


Aula #17 - Usando id com CSS

> Nesta aula veremos como configurar um estilo para elementos específicos utilizando o identificadores "id".

:::::::::::::::::::::::::::::

No documento HTML escolha o elemento alvo para modificar(<h2>Subtitle 2</h2>) e coloque o parâmetro 'id=" "', ex:
[...]
	<h1>Title</h1>
	<h2>Subtitle 1</h2>
    ->	<h2 id="alt">Subtitle 2</h2>
[...]

Nas CSSs, para modificar o estilo do mesmo é necessário conjugar o id com uma cerquilha(#) após o elemento que o define, ex:
[...]
	h2{
	background-color: green;
	}

	h2#alt{
	background-color: blue;
	}
[...]

Todos os <h2> que forem conjugados em geral terão o fundo verde, mas o que possue um id específico terá uma configuração específica (nesse caso o fundo verde)

:::::::::::::::::::::::::::::

> Em geral, os id's podem ser usados somente em estilos de caráter ÚNICO (ex: logo única e principal do site), não podendo usar um mesmo id em vários elementos.

===========================================================


Aula #18 - As diferenças entre id e class

> Contráriando e diversificando a opção do "id", as "class" servem para definir um estilo para além de um elemento específico. Sendo assim, servindo como um seletor de características de estilos aplicáveis para funções que dois ou mais elementos vão desempenhar no código.
> Em outras palavras, analogicamente o "id" seria como o CPF de uma pessoa: único e serve só para uma pessoa específica. Em contrapartida a class seria como uma característica mais geral de uma pessoa(alta, magra, cabelo grande, etc..).
> Nas CSSs, para conjurar uma classe de elementos para configura-la utilizaremos somente um ponto(.) e o nome da classe em seguida, NÃO É NECESSÁRIO específicar o elemento que está sendo incorporado.
> É possível caracterizar mais de uma classe para um mesmo elemento específico, basta colocar as classes de preferência somente separados por espaços.

:::::::::::::::::::::::::::::

[...]
	<h1 class="destaque">Title 1</h1>
	<p>Ser ou não <span class="destaque">ser</span>?</p>
	<h2 class="basico" id="alternativo">Subtitle 1</h2>
    	<h1 class="destaque">Title 2</h1>
	<h2 class="intermediario">Subtitle 2</h2>
	<h1 class="destaque basico">Title</h1>
	<h2 class="avançado">Subtitle 3</h2>
[...]

:::::::::::::::::::::::::::::

> Nesta mistura de características de diferentes classes dentro de um mesmo elemento existe uma hierarquia que essas modificações seguem:
... body==> element(h1)==> class(.basico)==> id(alternativo)
> A tag <span> é semelhante a <div>, mas a diferença é que por natureza <span> não significa nada, serve somente para relacionar uma configuração CSS personalizada(classes e ids).


===========================================================


Aula #19 - Pseudo-classes em CSS

Representadas por:

ex:	:active		:checked		:enabled		:disabled	:corner-present	
	:empty		:end		:first		:hover		:double-button

:hover	->	quando passa o mouse por cima acontece algo

	ex:	div:hover {
	background-color: yellow;
	}

div > p	-> parágrafo que está dentro da div (p é filho de div)

Deixar texto de "p" invisível:

	div > p {
	   display: none;
	}

Deixar texto de "p" visível quando passar o mouse em cima:
(útil para criar menu)

	div:hover > p {
		display: block;
	}

<div>	->	é um espaço qualquer

height	->	altura

 width	->	largura

border	->	borda		ex:	border: 1px solid black; (shorthand)

display: inline-block;	->	tudo na mesma linha


===========================================================


Aula #20 - Pseudo-elementos em CSS

> Outros exemplos de ESTADOS de elementos (pseudo-classes) são: visited e active.
> A pseudo-class "visited" é bastante usada em âncoras/links, ela serve para ativar uma configuração de estivo quando uma unidade de elemento for visitada. 
> Já a pseudo-class "active" é um estado de elemento que serve para ativar uma configuração de estilo quando uma unidade de elemento for ATIVADA, ou seja, quando clicarmos nela por exemplo. 
> Os pseudo-elementos podem agir nas classes, nos elementos, nos id's e etc. Eles mexem diretamente no CONTEÚDO PERIFÉRICO DO ELEMENTO. Nas CSS, os pseudo-elementos são representados por "dois pontos" DUPLOS (::)
> Suponha que queremos que todo link no final tenha uma indicação de que é um link, podemos abrir um seletor personalizado para links e usar o pseudo-elemento (::) "after" para fazer isso.
> Exemplo de uso de pseudo-elemento:

a::after {
            content: ' ⇦';
            color: darkgray;
            font-weight: normal;
        }

> O código acima faz com que manipulemos o conteúdo periférico posterior (pseudo-elemento "after") de links, a Propriedade de Estilo "content" detém o valor que foi determinado para aparecer logo em seguida de todo link que inserirmos no site (seta para esquerda). Além disso, as outras propriedades de estilo do exemplo configuram o estilo de cor e peso desse conteúdo periférico posterior.
> Também existe o pseudo-elemento "before", que funciona como o "after" mas de forma oposta, fazendo com que manipulemos o conteúdo periférico que antecede os elementos.
> Nota: Também conseguimos configurar pseudo-elementos e mexer em conteúdos periféricos quando usamos classes (class) . Exemplo:

.especial::before {
            content: '⇨ ';
            color: darkgray;
            font-weight: normal;
        }

.especial::after {
            content: ' ⇦';
            color: darkgrey;
            font-weight: normal;
        }

> O código no exemplo acima utiliza pseudo-elementos para manipular conteúdo periférico de links que pertencem à classe (class) "especial".
> Observação: O sinal de maior (>) representa no CSS o "children", que seria o filho (quando temos elementos dentro de elementos).
> Revisão de todos os seletores personalizados:

	#	id
	.	class
	:	pseudo-class
	::	pseudo-element
	>	children


===========================================================


Aula #21 - Modelos de Caixas: primeiros passos

> Os conceitos do Modelo de Caixas (Box Model) são aplicáveis ao HTML e ao CSS. Se trata de conjuntos que irão facilitar muito na hora de organizarmos o design e as partes do nosso site.
> Quando temos um documento HTML, tudo aquilo que é exibido na tela é exibido em forma de caixa. De tal modo que a grande maioria das caixas na HTML podem estar uma dentro da outra. Dessa forma, podemos formar hierarquias de caixas.
> Quando colocamos um elemento dentro do outro, o termo que descreve isso é o "ANINHAMENTO", algo em forma de ninho, coisas que estão uma dentro da outra e assim por diante. Na prática, uma caixa seria todo elemento de um site visível na tela.
> Considerando que todos os elementos de um site estão dentro de uma caixa, quando formatamos um elemento com o CSS através de seletores na verdade estamos configurando a caixa que vai estar exibindo esse elemento.

> ANATOMIA DAS CAIXAS:

	PARTE DE CONTEÚDO: Toda caixa possui um tamanho, que é chamado de "PARTE DE CONTEÚDO", esse tamanho é especificado em duas medidas muito importantes que são: Altura ("height") e Largura ("width").

	BORDA: Podemos traçar uma linha em volta da Parte de Conteúdo (que define o tamanho da caixa) e chamamos essa linha de "BORDA". Sendo assim uma borda é uma linha que circunda o seu conteúdo. 

	PADDING: Por padrão, a linha da borda irá ficar muito próxima da parte de conteúdo, para dar um distanciamento devemos adicionar um espaço de "PADDING" (acolchoamento), que seria uma pequena lacuna entre a parte de conteúdo e a borda , para dar aquela engordada no elemento, mantendo a nossa borda distante do conteúdo. 

	MARGIN: Ao desenvolver um site, eventualmente iremos ter caixas uma embaixo da outra de forma seguida e, se uma dessas caixas estiver configurada com um espaçamento "padding", pode ser que elas fiquem muito próximas uma da outra e acabem "grudando" na borda do elemento de cima. Pensando nisso, podemos criar além de um espaço interno (padding), um espaçamento EXTERNO logo após a borda, que seria um "MARGIN".

	OUTLINE/TRACEJADO: Outra coisa que podemos fazer dentro do margin (espaçamento externo), logo do lado de fora da borda, é criar um tracejado, que não seria uma segunda borda e sim uma área chamada de " OUTLINE " (contorno/traçado). 

> Sendo assim, ainda referente à anatomia das caixas, todo elemento e consequentemente toda caixa tem a "parte de conteúdo" e uma "borda", dessa borda para dentro temos o "padding", da borda para fora temos o "margin" e, ainda dentro do margin e fora da borda, temos a área do "outline".
> Nota: Todas essas características anatômicas das caixas (tirando a parte de conteúdo) geralmente só irão se manifestar se forem previamente configuradas no seu código.

> TIPOS DE CAIXA:
- Basicamente, existem dois tipos de caixas, as do tipo "box-level / block-level" e "inline-level".

	box-level / block-level: Em uma caixa do tipo "box-level / block-level", o dito elemento sempre irá se iniciar em uma nova linha e como padrão sempre ocupará a largura total da tela ou do elemento onde ele está contido (100% do viewport), sendo que irá pular para a próxima linha antes de continuar o conteúdo posterior e aí sim inserir outros boxes. As caixas desse tipo são isoladas e independentes.

- Exemplos de tags do tipo "box-level / block-level": <div> <p> <main> <video> <h1>

	inline-level: Já uma caixa do tipo "inline-level" não vai começar em uma nova linha, e sim no ponto exato onde foram definidos, no meio de um parágrafo por exemplo. E a largura dele vai ocupar apenas o tamanho relativo ao seu conteúdo, sendo que não irá quebrar a linha ao terminar, continuando o conteúdo de forma direta (em um parágrafo por ex) sem pular para a linha de baixo.

- Exemplos de tags do tipo "inline-level": <a> <span> <code> <strong> <em>


===========================================================


Aula #22 - Modelos de Caixas na prática (pt.1)

> Nesta aula iremos ver na prática alguns conceitos iniciais de box-model e seus derivados.
> Abaixo as propriedades usadas na video-aula e outras opções possíveis para praticar.

> Propriedades de borda:

largura	->	border-width: 10px;

estilo	->	border-style:		solid;	 (sólida)
					dashed;	 (tracejada)
					dotted;	 (pontilhada)
					double;	 (dupla)
					groove;	 (em 3d)

cor	->	border-color: red;

- Shorthand:
	border: 10px solid red (largura, estilo, cor)


> Propriedades de padding:
	padding-top: 	10px;	(de topo)
	padding-right:	10px;	(à direita)
	padding-bottom: 10px;	(de baixo)
	padding-left: 	10px;	(à esquerda)

- Shorthand:
	padding: 15px 10px 15px 10px;	(sent. horário: top, right, bottom, left)
	padding: 10px; 			(os 4 lados iguais a 10px)
	padding: 15px 10px;		(cima e baixo 15px / esquerda e direita 10px)


Acessar DevTools do Chrome: botão direito no corpo do site -> inspecionar

box-level = block-level


===========================================================


Aula #23 - Modelos de Caixas na prática (Pt.2)

> Iremos continuar o aprendizado sobre os box-models...
> Confira os exemplos utilizados na aula abaixo:

> Propriedades de margem:
	margin-top:  	10px;	topo
	margin-right:  	10px;	direita
	margin-bottom:  10px;	baixo
	margin-left:  	10px;	esquerda

- Shorthand:
	margin: 10px;			1 medida  = 4x (ao quadrado)
	margin: 10px 15px;		2 medidas = vertical / horizontal
	margin: 10px 9px 12px;		3 medidas = topo / direita e esquerda / baixo
	margin: 10px 9px 15px 8px;	4 medidas = sentido horário: topo / direita / baixo / esquerda
	margin: auto;			auto      = centralizar horizontalmente

> Propriedades de outline:
	outline-width: 5px;		largura
	outline-style: dashed;		estilo ("cortado")
	outline-color: salmon;		cor ("salmão")

- Shorthand:
	outline: 5px dashed salmon;	largura / estilo / cor

> Modificar o estilo de box-model block/inline:
	h1 {				<- originalmente "block"
	display: inline;
	}

	a{				<- originalmente "inline"
	display: block;
	}

- OBS: Existe uma terceira via na qual é chamada de "inline-block" - "inline" com características "block".


===========================================================


Aula #24 - Grouping Tags em HTML5

> Nessa aula vai ser apresentado um método de utilizar junto com os conhecimentos adquiridos em anatomias de box-model uma maneira de organizar e otimizar os ajustes das caixas agrupadas.
> Anteriormente e nas versões anteriores da HTML era muito comum utilizar "divs" dentro de outras para formatar menus, seções de textos, rodapés e etc...
> Na HTML5, com uma proposta de ser uma linguagem semâmtica, propõe-se a utilizar e facilitar a formatação de sites com tags específicas para isso.
> OBS: Não é proibido ou "ruim" utilizar "div" ou "span" no código, isso irá depender do contexto em que o mesmo irá ser utilizado.

> Tags sem semântica:
	<div>
	<span>

> Tags semânticas:
	<header>				<- cabeçalho
		<nav>				<- menus, links, navegação, etc.
	<main>					<- principal
		<section>			<- sessão (assuntos, categorias, etc.)
			<article>		<- artigo (uma notícia, matéria, redação, etc.)
				<aside>		<- conteúdo periférico (nome do autor, referências, etc.)
	<footer>				<- rodapé (autor do site, empresa, direitos autorais, etc.)

OBS: Não há hierarquia fixa nos termos de utilização e organização das tags. Dependendo do estilo e do conteúdo do site é possível mesclar diferentes tags como acima ou abaixo de outras que está representado no exemplo acima.


===========================================================


Aula #25 - Sombras nas caixas

> Nesta aula é apresentado a funcionalidade de criar sombras nas caixas funcionais do site chamado "box-shadow".
> Para declarar os valores do "box-shadow" é necessário inserir certos valores das medidas na qual irá desempenhar este contraste de luz, por ex:

	box-shadow: insert 1px 1px 1px 1px black;		estilo interna / pos. X / pos. Y / tamanho borrão (blur) / espalhamento (spread) / cor da sombra

	Para sombras externas basta remover o "insert".

> OBS: SEMPRE usar a cor preta mas com transparência para não ficar tão forte (valor "alpha" da cor).
> Na ferramenta DevTools há a possibilidade de editar os valores da sombra e testar qual a melhor forma de sombra.


===========================================================


Aula #26 - Caixas com vértices arrendondadas

> Além de projetar sombras em caixas, é possível criar vértices arrendondadas em caixas utilizando o comando base "border-radius".
> Os comandos variados para modificar e criar esse efeito nas vértices específicas se encontra nesta certa sequência:

	border-top-left-radius: 2px;		(ponta superior esquerda)
	border-top-right-radius: 2px;		(ponta superior direita)
	border-bottom-right-radius: 2px;	(ponta inferior direita)
	border-bottom-left-radius: 2px;		(ponta inferior esquerda)

	OBS: A ordem segue o sentido >horário< começando pelo topo esquerdo.

	Shorthand:
	border-radius: 1px 1px 1px 1px;		sup. esq. / sup. dir. / inf. dir. / inf. esq.

	Shorthand com 1 valor:
	border-radius: 1px;			todos os lados

	Shorthand com 2 valores:
	border-radius: 1px 2px;			horizontal / vertical

> DICA: para criar uma caixa em forma de bola:
	height: 100px;
	width: 100px;				OBS: altura e largura precisam ser o mesmo tamanho. 
	border-radius: 50%;


===========================================================


Aula #27 - Bordas decoradas

> OBS: este método não é recomendável, mas caso precise veja o vídeo na íntegra:
- https://www.youtube.com/watch?v=n0rjAs_Im4w


===========================================================


Aula #28 - Projeto de site

> Nas próximas aulas será trabalhado um novo projeto de site para demonstrar todo o conhecimento adquirido de acordo com o desenvolvimento do curso, além de aprender novas maneiras de facilitar a construção como também conteúdos novos para por em prática.

	N.d.E.: O site na qual eu construí por mim mesmo antes mesmo de olhar as aulas com o projeto original está na pasta "Desafios" nos arquivos pessoais de estudo do curso!


===========================================================


Aula #29 - Variáveis em CSS

> No caminhar do projeto do site foi apresentado uma novidade que irá facilitar a organização do desenvolvimento do site: Variáveis em CSS!
> A princípio, CSS não é uma linguagem de programação, e sim de MARCAÇÃO de FOLHAS DE ESTILO e mesmo assim apresenta variáveis como característica de linguagens de programação. LEMBRE-SE: Toda linguagem de programação possuí variáveis, mas nem todas as linguagens que tem variáveis são linguagens de programação.
> Para utilizar as variáveis em CSS nos iremos utilizar os seguintes comandos:

	:root{			<== pseudo-classe na qual acessa a "raiz" do documento, servindo para fazer alterações globais válidas para todos os elementos.
	--cor1: #ACCEE6;	<== variável "--cor1" é correspondente ao código hex. de cor específicado. OBS: toda variável possui "--" no começo.
	--cor2: #65ADE0;
	--cor3: #4E86AD;
	}

	body{
	background-color: var(--cor3);	<== declarando a variável no código para mudar a cor de fundo do "body".
	color: var(--cor1);
	}

> Neste exemplo acima podemos observar a possibilidade de configurar uma paleta de cores para o site. Se houver uma situação em que seja necessário mudar a(s) cor(es) do site, a única mudança que deverá ser feita é diretamente na configuração da variável correspondente ao invés de ter o trabalho de mudar elemento por elemento.
> É possível relacional qualquer comando que mude algum elemento com uma variável declarável especifica, sendo possível relacionar cores, fontes, estilos, entre muitos outros.


=========================================================== 


Aula #30 - Responsividade para sites / Continuação do projeto, entre outros.

> Anotações de dicas importantes na construção do site.
> Sempre utilizar "width = 100%" para imagens médias/grandes e +/- "width = 50%" para imagens pequenas para a mesma adaptar a diferentes tamanhos da tela automáticamente.
> Se possível, trabalhar majoritariamente com o "max-width" por questão de facilidade (mas o min-width é importante também mas é relativo).
> Comando para fazer a cor de fundo de alguma box mudar progressivamente/transicional:

	transition-duration: 0.5s /* segundos */

> Caso o elemento que deseja selecionar não seja filho direto do elemento div que identifique o bloco não é necessário usar o seletor ">" para selecionar o mesmo. Neste exemplo, selecionaremos todos os parágrafos que estejam dentro do "main" mesmo que estejam dentro de outros elementos:

	main p{
	text-indent: 3rem;
	text-align: justify;
	margin : 0.75rem 0rem;
	}

> Seletor Global: Este comando é muito útil para definir as margens e paddings(todos os h1, h2, h3, p, etc) sobressalentes que irão atrapalhar as boxes na hora de mudar o estilo delas. O seletor global é válido para todos os elementos e irá mudar todas as características declarados de todos elementos do documento:

	* {		
	margin: 0%;
	padding: 0%;
	}

> Dica: É possivel colocar margens em medidas negativas ("margin: -10px;") para encaixá-las em cima de outros blocos para, por exemplo, fazer uma barra personalizada com escrita em cima de outro elemento.

> Comando para dividir uma lista em duas ou mais colunas e também justificar a lista dentro do bloco:

	columns: 2; /* 2 ou mais */
	list-style-position: inside; /* Justificar a lista dentro do bloco maior */

> Uma maneira mais certa de declarar emojis nas CSS's ao invés de copiar eles "cru" seria:

	content:'\1F517';
	
	/* Para adicionar um espaço antes(ou depois, só inverter a ordem) do emoji: */
	
	content:'\00A0\1F517';

> Ao contrário do bloco "picture", o "img" não é considerado bloco, portanto, a medida relativa do comando "width" não irá funcionar. Para isso, é necessário transformar o "img" em bloco:

	img {
	display: block
	}

> Posicionando responsivamente vídeos do YouTube:
- Vídeos do YouTube são difíceis de serem modificados pois ao incorporar no site possuem valores de tamanho e posicionamento já definidos, complicando ao adaptar o vídeos no site.
- Mas porém, há uma maneira de adaptar esses vídeos usando uma espécie de gambiarra nas CSS para adapta-lo de acordo com o tamanho da tela/elemento pai.
- Abaixo há o exemplo do código CSS na qual foi usado no site do projeto:

	div.iframe-content{				<== div como pai do elemento do vídeo com uma classe.
		background-color: transparent;
		margin: 2rem -2rem 3rem -2rem;		<== margens horizontais negativas para adaptar ao elemento pai (no caso o "MAIN").
		padding: 2rem -2rem;
		padding-bottom: 59%;			<== valor que pode ser editado de acordo com o tamanho da tela para não exibir barras pretas no topo/laterais.
		position: relative;			<== "relative" para o "absolute" funcionar.
	}
	div.iframe-content > iframe{
		position: absolute;
		top: 5%;
		left: 5%;
		width: 90%;				<== valor relativo ao comportamento do tamanho de acordo com a resolução da janela.
		height: 90%;
	}


===========================================================

	MÓDULO 3 - Git e GitHub!

===========================================================


Aula #01 - O que é Git e GitHub?

> Neste início de módulos iremos deixar de lado um pouco HTML/CSS e focar superficialmente nos Repositórios Locais/Remotos.
> Um repositório local serve justamente como um "banco" com o propósito de guardar dados do projeto de desenvolvimento que podem ser usados como um "backup" caso seja necessário.

:::::::::::::::::::::::::::::
	    Git
:::::::::::::::::::::::::::::

> O Git é uma ferramenta que tem esse mesmo propósito: auxiliar no desenvolvimento reservando diferentes versões do projeto que o próprio programador define e, caso seja necessário, restaurar uma diferente versão anterior.
> É muito comum haver testes de novas funcionalidades e ajustes experimentais em certos projetos e, caso algum processo dê errado e não tenha mais como "salvar", é muito mais prático voltar a uma versão mais estável anterioriormente e recomeçar/seguir outro caminho.

:::::::::::::::::::::::::::::
	   GitHub
:::::::::::::::::::::::::::::

> Apesar de terem o "Git" nome são diferentes ferramentas desenvolvidas por diferentes empresas. O GitHub é uma ferramenta de repositório remoto, sendo possível guardar um projeto em um banco de dados remotamente(nuvem).
> É possível também hospedar sites do projeto e várias outras funcionalidades que não serão abordadas nesse curso (há cursos específicos para Git/GitHub).
> Dentro dessas funcionalidades é possível desenvolver um projeto com um grupo de pessoas que terão acesso ao mesmo projeto e enviando suas modificações para o projeto original hospedado na nuvem.


===========================================================


Aula #02 - 

>


===========================================================